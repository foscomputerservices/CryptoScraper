name: CI

on:
  workflow_dispatch:
  pull_request:

jobs:
  run_tests:
    name: Test Swift v${{ matrix.swift }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        swift: ["5.9"]

    env:
      COIN_MARKETCAP_KEY: ${{ secrets.COIN_MARKETCAP_KEY }}
      BTC_TEST_CONTRACT_ADDRESS: ${{ secrets.BTC_TEST_CONTRACT_ADDRESS }}
      ETHER_SCAN_KEY: ${{ secrets.ETHER_SCAN_KEY }}
      ETH_TEST_CONTRACT_ADDRESS: ${{ secrets.ETH_TEST_CONTRACT_ADDRESS }}
      FTM_SCAN_KEY: ${{ secrets.FTM_SCAN_KEY }}
      FTM_TEST_CONTRACT_ADDRESS: ${{ secrets.FTM_TEST_CONTRACT_ADDRESS }}
      BSC_SCAN_KEY: ${{ secrets.BSC_SCAN_KEY }}
      BSC_TEST_CONTRACT_ADDRESS: ${{ secrets.BSC_TEST_CONTRACT_ADDRESS }}
      POLYGON_SCAN_KEY: ${{ secrets.POLYGON_SCAN_KEY }}
      POLYGON_TEST_CONTRACT_ADDRESS: ${{ secrets.POLYGON_TEST_CONTRACT_ADDRESS }}
      OPTIMISTIC_ETHER_SCAN_KEY: ${{ secrets.OPTIMISTIC_ETHER_SCAN_KEY }}
      OPTIMISTIC_TEST_CONTRACT_ADDRESS: ${{ secrets.OPTIMISTIC_TEST_CONTRACT_ADDRESS }}
      TRON_TEST_CONTRACT_ADDRESS: ${{ secrets.TRON_TEST_CONTRACT_ADDRESS }}

    steps:
      - uses: swift-actions/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift }}

      - uses: actions/checkout@v2

      - name: Run Tests
        run: swift test

  # Ensure that compilation succeeds on iOS-based platforms
  run_ios_build_tests:
    name: Test ${{ matrix.ios_platform }} on Xcode v${{ matrix.xcode_version }}
    runs-on: macos-latest
    strategy:
      matrix:
        ios_platform: ["ios", "tvos"] # , "watchos", "visionos"]
        xcode_version: ["15.0"]

    steps:
      # - uses: maxim-lobanov/setup-xcode@v1
      #   with:
      #     xcode-version: ${{ matrix.xcode_version }}

      - uses: actions/checkout@v2

      - name: Install xcpretty
        run: |
          gem install xcpretty --silent --quiet --no-document

      - name: Run ${{ matrix.ios_platform }} Tests
        run: xcrun xcodebuild -IDEClonedSourcePackagesDirPathOverride="$PWD/.dependencies" -derivedDataPath "$PWD/.derivedData" build -scheme CryptoScraper -destination "generic/platform=${{ matrix.ios_platform }}" | xcpretty

  # Unable to build at this time with a dependency of SwiftNIO
  # Soon maybe? https://forums.swift.org/t/windows-nio/35003
  #
  # run_tests_windows:
  #   name: Test Swift v${{ matrix.swift }} on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [windows-latesst]
  #       swift: ["5.8.1"]

  #   env:
  #     COIN_MARKETCAP_KEY: ${{ secrets.COIN_MARKETCAP_KEY }}
  #     BTC_TEST_CONTRACT_ADDRESS: ${{ secrets.BTC_TEST_CONTRACT_ADDRESS }}
  #     ETHER_SCAN_KEY: ${{ secrets.ETHER_SCAN_KEY }}
  #     ETH_TEST_CONTRACT_ADDRESS: ${{ secrets.ETH_TEST_CONTRACT_ADDRESS }}
  #     FTM_SCAN_KEY: ${{ secrets.FTM_SCAN_KEY }}
  #     FTM_TEST_CONTRACT_ADDRESS: ${{ secrets.FTM_TEST_CONTRACT_ADDRESS }}
  #     BSC_SCAN_KEY: ${{ secrets.BSC_SCAN_KEY }}
  #     BSC_TEST_CONTRACT_ADDRESS: ${{ secrets.BSC_TEST_CONTRACT_ADDRESS }}
  #     POLYGON_SCAN_KEY: ${{ secrets.POLYGON_SCAN_KEY }}
  #     POLYGON_TEST_CONTRACT_ADDRESS: ${{ secrets.POLYGON_TEST_CONTRACT_ADDRESS }}
  #     OPTIMISTIC_ETHER_SCAN_KEY: ${{ secrets.OPTIMISTIC_ETHER_SCAN_KEY }}
  #     OPTIMISTIC_TEST_CONTRACT_ADDRESS: ${{ secrets.OPTIMISTIC_TEST_CONTRACT_ADDRESS }}
  #     TRON_TEST_CONTRACT_ADDRESS: ${{ secrets.TRON_TEST_CONTRACT_ADDRESS }}

  #   steps:
  #     - uses: compnerd/gha-setup-swift@main
  #       with:
  #         branch: swift-${{ matrix.swift }}-release
  #         tag: ${{ matrix.swift }}-RELEASE

  #     - uses: actions/checkout@v2

  #     - name: Run Tests
  #       run: swift test

  #####################################
  # swift 5.8 has removed generate-xcodeproj, so we'll need to find a different
  # way to do this.  I'm sure there will be an update soon.
  #####################################

  # analyze_code_coverage:
  #   runs-on: macos-12
  #   env:
  #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  #     COIN_MARKETCAP_KEY: ${{ secrets.COIN_MARKETCAP_KEY }}
  #     BTC_TEST_CONTRACT_ADDRESS: ${{ secrets.BTC_TEST_CONTRACT_ADDRESS }}
  #     ETHER_SCAN_KEY: ${{ secrets.ETHER_SCAN_KEY }}
  #     ETH_TEST_CONTRACT_ADDRESS: ${{ secrets.ETH_TEST_CONTRACT_ADDRESS }}
  #     FTM_SCAN_KEY: ${{ secrets.FTM_SCAN_KEY }}
  #     FTM_TEST_CONTRACT_ADDRESS: ${{ secrets.FTM_TEST_CONTRACT_ADDRESS }}
  #     BSC_SCAN_KEY: ${{ secrets.BSC_SCAN_KEY }}
  #     BSC_TEST_CONTRACT_ADDRESS: ${{ secrets.BSC_TEST_CONTRACT_ADDRESS }}
  #     POLYGON_SCAN_KEY: ${{ secrets.POLYGON_SCAN_KEY }}
  #     POLYGON_TEST_CONTRACT_ADDRESS: ${{ secrets.POLYGON_TEST_CONTRACT_ADDRESS }}
  #     OPTIMISTIC_ETHER_SCAN_KEY: ${{ secrets.OPTIMISTIC_ETHER_SCAN_KEY }}
  #     OPTIMISTIC_TEST_CONTRACT_ADDRESS: ${{ secrets.OPTIMISTIC_TEST_CONTRACT_ADDRESS }}
  #     TRON_TEST_CONTRACT_ADDRESS: ${{ secrets.TRON_TEST_CONTRACT_ADDRESS }}

  #   steps:
  #    - uses: actions/checkout@v2

  #    - name: Generate an xcodeproj
  #      run: swift package generate-xcodeproj

  #    - name: Run Tests w/ code coverage
  #      run: xcodebuild test -scheme CryptoScraper-Package -destination platform="macOS" -enableCodeCoverage YES

  #    - name: Upload coverage reports to Codecov
  #      uses: codecov/codecov-action@v3